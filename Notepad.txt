1) End points does not matter, but still we can communicate and exchange the data.
2) Irrespective programming language, operating system, end points platform  but still host application
communicate and exchange the data among the applications we are using web services.
3) In other words, in order to establish interoperable communication among the applications
we are using web services irrespective of end points, programming languages.

Web Services:

Rest Web Services --> which  makes use of HTTP.(Security not up to mark)

SOAP Web Services --> SOAP -->internally makes use of HTTP. (Banking environment,More secured)

HTTP(Hypertext Transfer Protocol) Protocol:

GET (Fetch some data)
POST (Insert the data)
PUT (Update the data)
DELETE (delete the data)
HEAD
OPTIONS
PATCH

By using HTTP, we will perform CRUD operations.
C - Create  R --Read  U -- Update  D- Delete

Web Services:

SOAP (Simple Object Access Protocol)
  soap is layer on top of Http
  xml (Data) -- we can create user defined tags which we can't do  in case of HTML.
  Data exchange can be done among applications using XML in case of SOAP
  We are using XML as data format, web technologies will not understand directly instead we need
  parsers will help to understand such as DOM, SAX parsers.
  DOM, SAX parsers will convert the data which make web tech to understand. So make these conversions,
  It requires memory and process. It reduces application performance.
  It is more secured compare to REST (Security is more important than Performance).
  Security is the highest priority, SOAP is right choice.




REST (Representational State Transfer Protocol)
  Http
  Json -- Javascript Object Notation(Data) --It is a key and value pair.
  Data exchange can be done among applications using Json in case of REST.
  Json format will understand without any intermediate parsers make to understand. So performance
  is high compare SOAP.
  Performance is high priority than security, then move to REST.

Evolving:

J2SE, J2EE, J2ME, Android,
Ejbs,
Struts Framework
Spring Framework (MVC Architecture)

M --Model (Pojo, It is java bean where we can write the business logic) -- Business Layer
V --View (Presentation Layer)
C --Controller (Controller)

Inversion of Controller
Dependency Injection (Autowired)

Spring Boot:

Spring Boot is layer on top of Spring Framework. The name suggest, bootstrap the spring applications.
Spring boot will help you speed to bootstrap the spring applications.
It will provide the embedded application server (Tomcat) which is default.
It manages dependency modules automatically in pom.xml (Project Object Module)
It takes care of autoconfiguration / general configuration.
It takes care of transactional management.
It is  more secure.x


Enabling different environments using profilers.
Environments:
   Dev (Developers),
   Testing/ uat (Testers),
   Prod(real users)

Spring profiles: @Profile, @Value

Springboot
Dependency Injection: Dependency Injection is passing dependency to the other objects or frameworks.
or it is a technique for achieving loose coupling between objects and their collaborators, or dependencies.

Dependency Injection can be done in  3 ways.
1) Constructor DI (Type 3)
2) Method DI.(Type 2)
3) Property DI or Interface Injection (Type 1)

Advantages of Dependency Injection:
1) Decoupling the creation of object.
2) Dependency injection makes testing easier.
3) Reusability of code.
4) Ease of refactoring.
5) Reduced Dependencies and Reduced dependencies carrying.
6) More Readable Code.


Naresh IT: https://www.youtube.com/watch?v=-qIsa1uSZKk&list=PLVlQHNRLflP-wlUj1MAuLwiMekHpP-yQu&index=7


Dependency Lookup:

Main component gets dependent components by searching for that component.
Main component contains logic for searching the dependent component.

Dependency Injection:(Inversion of Control)

In this model, underlying container, server, framework dynamically assigns dependent / slave object to
main / target class object. Main class need not write external logic to search dependent components.

Eg1: Assigning material to student when he registers for  the course.
Eg2: The way constructor initializing the values to member variables of class when object is created is called
dependency injection.

Note: Underlying server, container, framework dynamically pushes dependent objects to main/target object.

5 ways of DI:
a) Setter Injection.
b) Constructor Injection.
c) Aware Injection (Interface Injection)
d) Lookup Method Injection.(In order to avoid problems with Aware Injection)
e) Method Injection / Method Replacer.


Advantages:
Container dynamically assigns dependent objects to main object.
DisAdvantages:
Container may assign necessary and unnecessary dependent objects to main object.


References for Dependency Injection:
1. https://techiethoughtss.wordpress.com/2016/11/16/refactoring-to-dependency-injection-principle/
2. https://developer.android.com/training/dependency-injection
3.




Authentication ->  JWT (Java Web Token which is generated by server and exchange by the client when needed)

Authorization.
Spring security:
            Application Security
            Web Security
Swagger Configuration: Replacement of Postman which helpful to test http methods (get,post,put,delete)
Validations:
        Client side validation.
        Server side validation.

Transactional Management:



References:
1) https://openclassrooms.com/en/courses/5684146-create-web-applications-efficiently-with-the-spring-boot-mvc-framework/6156961-organize-your-application-code-in-three-tier-architecture
